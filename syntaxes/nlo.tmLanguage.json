{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Nlo",
	"scopeName": "source.nlo",
	"patterns": [
		{"include": "#line comment"},
		{"include": "#block comment"},
		
		{
			"comment": "use module declaration",
			"begin": "\\b(use)\\b\\s+(?:([A-Z][a-zA-Z]*)(?=\\:)(\\:?))*([A-Z][a-zA-Z]*)(\\.)",
			"beginCaptures": {
				"1": {"name": "keyword.other.use.nlo"},
				"2": {"name": "entity.name.type.module.nlo"},
				"3": {"name": "keyword.operator.accessor.nlo"},
				"4": {"name": "entity.name.type.module.nlo"},
				"5": {"name": "keyword.control.end.nlo"}
			},
			"end": "(\\.)",
			"endCaptures": {
				"1": {"name": "keyword.control.end.nlo"}
			}
		},

		{
			"comment": "signed integer declaration without value assignment",
			"match": "\\b(int8|int16|int32|int64|int128)\\s+([a-z0-9_][a-zA-z0-9_]*)(\\.)",
			"captures": {
				"1": {"name": "storage.type.integer.signed.nlo"},
				"2": {"name": "variable.name.integer.signed.nlo"},
				"3": {"name": "keyword.control.end.nlo"}
			}
		},

		{
			"comment": "function call",
			"begin": "([A-Z][a-zA-Z]*)(\\()",
			"beginCaptures": {
				"1": {"name": "entity.name.function.nlo"},
				"2": {"name": "punctuation.parenthesis.nlo"}
			},
			"end": "(\\))(\\.)",
			"endCaptures": {
				"1": {"name": "punctuation.parenthesis.nlo"},
				"2": {"name": "keyword.control.end.nlo"}
			},
			"patterns": [
				{"include": "#line comment"},
				{"include": "#block comment"},
				{"include": "#strings"}
			]
		},

		
		{
			"comment": "function declaration",
			"begin": "\\b(function|test)\\s+([A-Z][a-zA-Z]*)",
			"beginCaptures": {
				"1": {"name": "keyword.other.function.nlo"},
				"2": {"name": "entity.name.function.nlo"}
			},
			"end": "\\("
		},


		{"include": "#floating point literal"},
		{"include": "#integer literal"},
		{"include": "#string literal"},
		{"include": "#char literal"},
		{"include": "#boolean literal"},
		
		{"include": "#public keyword"},
		{"include": "#mut keyword"},
		{"include": "#control flow keywords"},
		{"include": "#arithmetic keywords"},
		{"include": "#comparison keywords"},
		{"include": "#assignment keyword"},
		{"include": "#other keyword"}
	],
	
	"repository": {
		"line comment": {
			"name": "comment.line.nlo",
			"begin": "//",
			"end": "$"
		},
		"block comment": {
			"name": "comment.block.nlo",
			"begin": "/\\*",
			"end": "\\*/"
		},


		"floating point literal": {
			"comment": "floating point literal",
			"name": "constant.numeric.float.nlo",
			"match": "\\b[0-9]+\\.[0-9]+\\b"
		},
		"integer literal": {
			"comment": "integer literal",
			"name": "constant.numeric.integer.nlo",
			"match": "\\b[0-9]+\\b"
		},
		"string literal": {
			"name": "string.quoted.double.nlo",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"comment": "content between quotation marks",
					"name": "constant.character.escape.nlo",
					"match": "\\\\."
				}
			]
		},
		"char literal": {
			"name": "string.quoted.single",
			"begin": "\\'",
			"end": "\\'",
			"patterns": [
				{
					"comment": "content between single quotation marks",
					"name": "constant.character.escape.nlo",
					"match": "\\\\."
				}
			]
		},
		"boolean literal": {
			"name": "constant.language.boolean.nlo",
			"match": "\\b(true|false)\\b"
		},



		"public keyword": {
			"comment": "public keyword",
			"name": "storage.modifier.visibility.nlo",
			"match": "\\bpublic\\b"
		},
		"mut keyword": {
			"comment": "mutable keyword",
			"name": "storage.modifier.mutable.nlo",
			"match": "mut"
		},
		"control flow keywords": {
			"comment": "control flow keywords",
			"name": "keyword.control.nlo",
			"match": "\\b(if|else|while|returns|return|restart|exit|assert)\\b"
		},
		"arithmetic keywords": {
			"name": "keyword.operator.arithmetic.nlo",
			"match": "(\\+|-|/|\\*|%)"
		},
		"comparison keywords": {
			"name": "keyword.operator.comparison.nlo",
			"match": "(<=|>=|<|>|==|not=|is|not|and|or)"
		},
		"assignment keyword": {
			"name": "keyword.operator.assignment.nlo",
			"match": "="
		},
		"other keyword": {
			"name": "keyword.other.nlo",
			"match": "\\b(ref|deref|copy)\\b"
		}
	}
}