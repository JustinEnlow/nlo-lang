{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Nlo",
	"scopeName": "source.nlo",
	"patterns": [
		{"include": "#comments"},
		{"include": "#keywords"},
		{"include": "#data type"},
		{"include": "#literals"},
		{"include": "#identifiers"},
		{"include": "#brackets"}
	],
	
	"repository": {
		
		"comments": {
			"patterns": [
				{
					"comment": "line comment",
					"begin": "//",
					"end": "$",
					"name": "comment.line.nlo"
				},
				{
					"comment": "block comment",
					"begin": "/\\*",
					"end": "\\*/",
					"name": "comment.block.nlo"
				}
			]
		},
		
		"keywords": {
			"patterns": [
				{
					"comment": "",
					"match": "\\b(?:(module)|(use)|(function)|(test)|(ref)|(deref)|(copy)|(public)|(mutable))\\b",
					"captures": {
						"1": {"name": "keyword.other.module.nlo"},
						"2": {"name": "keyword.other.use.nlo"},
						"3": {"name": "keyword.other.function.nlo"},
						"4": {"name": "keyword.other.test.nlo"},
						"5": {"name": "keyword.other.ref.nlo"},
						"6": {"name": "keyword.other.deref.nlo"},
						"7": {"name": "keyword.other.copy.nlo"},
						"8": {"name": "keyword.other.public.nlo"},
						"9": {"name": "keyword.other.mutable.nlo"}
					}
				},
				{
					"comment": "control flow keywords",
					"name": "keyword.control.nlo",
					"match": "\\b(if|else|while|returns|return|restart|exit|assert|for each|in|loop|match)\\b"
				},
				{
					"comment": "arithmetic keywords",
					"match": "(?:(\\+)|(\\-)|(\\/)|(\\*)|(\\%))",
					"captures": {
						"1": {"name": "keyword.operator.arithmetic.add.nlo"},
						"2": {"name": "keyword.operator.arithmetic.subtract.nlo"},
						"3": {"name": "keyword.operator.arithmetic.divide.nlo"},
						"4": {"name": "keyword.operator.arithmetic.multiply.nlo"},
						"5": {"name": "keyword.operator.arithmetic.modulo.nlo"}
					}
				},
				{
					"comment": "comparison keywords",
					"match": "(?:(<=)|(>=)|(<)|(>)|(==)|(=/=))",
					"captures": {
						"1": {"name": "keyword.operator.comparison.lessThanEqualTo.nlo"},
						"2": {"name": "keyword.operator.comparison.greaterThanEqualTo.nlo"},
						"3": {"name": "keyword.operator.comparison.lessThan.nlo"},
						"4": {"name": "keyword.operator.comparison.greaterThan.nlo"},
						"5": {"name": "keyword.operator.comparison.equalTo.nlo"},
						"6": {"name": "keyword.operator.comparison.notEqual.nlo"}
					}
				},
				{
					"comment": "logical keywords",
					"match": "\\b(?:(and)|(or)|(not))\\b",
					"captures": {
						"1": {"name": "keyword.operator.logical.and.nlo"},
						"2": {"name": "keyword.operator.logical.or.nlo"},
						"3": {"name": "keyword.operator.logical.not.nlo"}
					}
				},
				{
					"comment": "assignment keyword",
					"name": "keyword.operator.assignment.nlo",
					"match": "="
				},
				{
					"comment": "accessor keyword",
					"match": "\\:",
					"name": "keyword.operator.accessor.nlo"
				},
				{
					"comment": "end statement keyword",
					"match": "\\.",
					"name": "keyword.control.end.nlo"
				}
			]
		},

		"data type": {
			"comment": "type",
			"match": "\\b(?:(int8)|(int16)|(int32)|(int64)|(int128)|(uint8)|(uint16)|(uint32)|(uint64)|(uint128)|(float32)|(float64)|(bool)|(char)|(struct)|(enum)|(generic)|(pointer)|(int)|(uint)|(float))\\b",
			"captures": {
				"1": {"name": "storage.type.integer.signed.8.nlo"},
				"2": {"name": "storage.type.integer.signed.16.nlo"},
				"3": {"name": "storage.type.integer.signed.32.nlo"},
				"4": {"name": "storage.type.integer.signed.64.nlo"},
				"5": {"name": "storage.type.integer.signed.128.nlo"},
				"6": {"name": "storage.type.integer.unsigned.8.nlo"},
				"7": {"name": "storage.type.integer.unsigned.16.nlo"},
				"8": {"name": "storage.type.integer.unsigned.32.nlo"},
				"9": {"name": "storage.type.integer.unsigned.64.nlo"},
				"10": {"name": "storage.type.integer.unsigned.128.nlo"},
				"11": {"name": "storage.type.float.32.nlo"},
				"12": {"name": "storage.type.float.64.nlo"},
				"13": {"name": "storage.type.bool.nlo"},
				"14": {"name": "storage.type.char.nlo"},
				"15": {"name": "storage.type.struct.nlo"},
				"16": {"name": "storage.type.enum.nlo"},
				"17": {"name": "storage.type.generic.nlo"},
				"18": {"name": "storage.type.pointer.nlo"},
				"19": {"name": "storage.type.integer.signed.nlo"},
				"20": {"name": "storage.type.integer.unsigned.nlo"},
				"21": {"name": "storage.type.float.nlo"}
			}
		},

		"literals": {
			"patterns": [
				{
					"comment": "floating point literal",
					"name": "constant.numeric.float.nlo",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				},
				{
					"comment": "integer literal",
					"name": "constant.numeric.integer.nlo",
					"match": "\\b[0-9]+\\b"
				},
				{
					"comment": "string literal",
					"name": "string.quoted.double.nlo",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"comment": "content between quotation marks",
							"name": "constant.character.escape.nlo",
							"match": "\\\\."
						}
					]
				},
				{
					"comment": "char literal",
					"name": "string.quoted.single",
					"begin": "\\'",
					"end": "\\'",
					"patterns": [
						{
							"comment": "content between single quotation marks",
							"name": "constant.character.escape.nlo",
							"match": "\\\\."
						}
					]
				},
				{
					"comment": "bool literal",
					"name": "constant.language.boolean.nlo",
					"match": "\\b(true|false)\\b"
				}
			]
		},

		"identifiers": {
			"patterns": [
				{
					"comment": "Identifier starting with capital letter",
					"match": "\\b([A-Z][a-zA-Z]*)\\b",
					"name": "entity.name.nlo"
				},
				{
					"comment": "variable identifier/ identifier with lower case letter",
					"match": "\\b([a-z][a-zA-Z0-9]*)\\b",
					"captures": {
						"1": {"name": "variable.name.nlo"}
					}
				}
			]
		},

		"brackets": {
			"comment": "brackets",
			"match": "(?:(\\()|(\\))|(\\{)|(\\})|(\\[)|(\\]))",
			"captures": {
				"1": {"name": "punctuation.parenthesis.open.nlo"},
				"2": {"name": "punctuation.parenthesis.close.nlo"},
				"3": {"name": "punctuation.bracket.curly.open.nlo"},
				"4": {"name": "punctuation.bracket.curly.close.nlo"},
				"5": {"name": "punctuation.bracket.square.open.nlo"},
				"6": {"name": "punctuation.bracket.square.close.nlo"}
			}
		}
	}
}